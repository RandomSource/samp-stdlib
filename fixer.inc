#if defined fixer_included
	#endinput
#endif
#define fixer_included

/*
 * fixer.inc
 * Version: 2.3.1 [BETA] (last updated on 5 September, 2016)
 *
 * Please visit the following thread to know about the features/fixes and the credits.
 * Also, support available there and you can also share your suggestions or fixes.
 * URL: http://forum.sa-mp.com/showthread.php?t=591458
 *
 * Funtions:
 * native FIXER_AllowUpdate(bool:allow = true);
 * native UnBan(const name[], const ip[]);
 *
 */

#if !defined KEY_AIM
	#define KEY_AIM (128)
#endif

#if !defined SPECIAL_ACTION_PISSING
	#define SPECIAL_ACTION_PISSING (68)
#endif

#if !defined getgravity
	native Float:getgravity();
#endif

#if !defined gpci
	native gpci(playerid, serial[], maxlen);
#endif

#if !defined IsValidVehicle
	native IsValidVehicle(vehicleid);
#endif

enum
{
    SPECTATE_TYPE_DISABLED = 0,
    SPECTATE_TYPE_ENABLED,
    SPECTATE_TYPE_PLAYER,
    SPECTATE_TYPE_VEHICLE
};

static bool:FIXER_UPDATER;

static DB:FIXER_g_BlacklistDB;

static const FIXER_ANIMATIONS[][] =
{
    "AIRPORT",      "Attractors",   "BAR",          "BASEBALL",     "BD_FIRE",
    "BEACH",        "benchpress",   "BF_injection", "BIKED",        "BIKEH",
    "BIKELEAP",     "BIKES",        "BIKEV",        "BIKE_DBZ",     "BLOWJOBZ",
    "BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
    "BUS",          "CAMERA",       "CAR",          "CARRY",        "CAR_CHAT",
    "CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
    "COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
    "DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
    "DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
    "FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
    "Flowers",      "FOOD",         "Freeweights",  "GANGS",        "GHANDS",
    "GHETTO_DB",    "goggles",      "GRAFFITI",     "GRAVEYARD",    "GRENADE",
    "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",    "INT_OFFICE",
    "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",      "KNIFE",
    "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",     "MD_CHASE",
    "MD_END",       "MEDIC",        "MISC",         "MTB",          "MUSCULAR",
    "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",    "PARK",
    "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",    "POLICE",
    "POOL",         "POOR",         "PYTHON",       "QUAD",         "QUAD_DBZ",
    "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",     "ROCKET",
    "RUSTLER",      "RYDER",        "SCRATCHING",   "SHAMAL",       "SHOP",
    "SHOTGUN",      "SILENCED",     "SKATE",        "SMOKING",      "SNIPER",
    "SPRAYCAN",     "STRIP",        "SUNBATHE",     "SWAT",         "SWEET",
    "SWIM",         "SWORD",        "TANK",         "TATTOOS",      "TEC",
    "TRAIN",        "TRUCK",        "UZI",          "VAN",          "VENDING",
    "VORTEX",       "WAYFARER",     "WEAPONS",      "WUZI"
};
static FIXER_p_AnimPrelaodTimer[MAX_PLAYERS][sizeof (FIXER_ANIMATIONS)];

enum FIXER_e_PLAYER_ATT
{
	bool:	FIXER_e_PLAYER_ATT_USED,
 			FIXER_e_PLAYER_ATT_MODEL,
    		FIXER_e_PLAYER_ATT_BONE,
    Float:	FIXER_e_PLAYER_ATT_X,
   	Float:	FIXER_e_PLAYER_ATT_Y,
   	Float:	FIXER_e_PLAYER_ATT_Z,
   	Float:  FIXER_e_PLAYER_ATT_RX,
   	Float:  FIXER_e_PLAYER_ATT_RY,
   	Float:  FIXER_e_PLAYER_ATT_RZ,
   	Float:  FIXER_e_PLAYER_ATT_SX,
   	Float:  FIXER_e_PLAYER_ATT_SY,
   	Float:  FIXER_e_PLAYER_ATT_SZ,
			FIXER_e_PLAYER_ATT_COLOR1,
			FIXER_e_PLAYER_ATT_COLOR2
};
static FIXER_p_Attachment[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][FIXER_e_PLAYER_ATT];

static FIXER_p_CheckpointTimer[MAX_PLAYERS][2];

static FIXER_p_Ip[MAX_PLAYERS][18];

static FIXER_p_Skin[MAX_PLAYERS];

static FIXER_p_CurrentWeapon[MAX_PLAYERS];

enum FIXER_e_WORLD_BOUND
{
    bool:   FIXER_e_WORLD_BOUND_CHECK,
    Float:	FIXER_e_WORLD_BOUND_PX,
    Float:	FIXER_e_WORLD_BOUND_PY,
    Float:	FIXER_e_WORLD_BOUND_PZ,
    Float:	FIXER_e_WORLD_BOUND_LX,
    Float:	FIXER_e_WORLD_BOUND_LY,
    Float:	FIXER_e_WORLD_BOUND_UX,
    Float:	FIXER_e_WORLD_BOUND_UY
};
static FIXER_p_WorldBounds[MAX_PLAYERS][FIXER_e_WORLD_BOUND];

static FIXER_p_ToggleSpecTick[MAX_PLAYERS];
static FIXER_p_ToggleSpecTimer[MAX_PLAYERS];

static FIXER_p_LastClickedMapTick[MAX_PLAYERS];

enum FIXER_e_SPECTATE_DATA
{
	FIXER_e_SPEC_DATA_ID,
	FIXER_e_SPEC_DATA_TYPE,
	FIXER_e_SPEC_DATA_MODE
};
static FIXER_p_SpecData[MAX_PLAYERS][FIXER_e_SPECTATE_DATA];

enum FIXER_e_BLACKLIST_DATA
{
    bool:	FIXER_e_BLACKLIST_DATA_ACTIVE,
            FIXER_e_BLACKLIST_DATA_TIMER,
            FIXER_e_BLACKLIST_DATA_TYPE,
            FIXER_e_BLACKLIST_DATA_REASON[128]
};
static bool:FIXER_p_BlacklistData[MAX_PLAYERS][FIXER_e_BLACKLIST_DATA];

enum FIXER_e_SYNC_DATA
{
	bool:	FIXER_e_SYNC_DATA_ACTIVE,
	Float:  FIXER_e_SYNC_DATA_POS[4],
	Float:  FIXER_e_SYNC_DATA_HEALTH,
	Float:  FIXER_e_SYNC_DATA_ARMOR,
			FIXER_e_SYNC_DATA_SKIN,
			FIXER_e_SYNC_DATA_COLOR,
			FIXER_e_SYNC_DATA_TEAM,
			FIXER_e_SYNC_DATA_WEAPONS[14],
			FIXER_e_SYNC_DATA_AMMOS[14]
};
static FIXER_p_SyncData[MAX_PLAYERS][FIXER_e_SYNC_DATA];

enum FIXER_e_GBUG_DATA
{
	bool:   FIXER_e_GBUG_DATA_ACTIVE,
    Float:	FIXER_e_GBUG_DATA_VPOS[3],
	        FIXER_e_GBUG_DATA_TICKCOUNT
};
static FIXER_p_GbugData[MAX_PLAYERS][FIXER_e_GBUG_DATA];

static FIXER_v_LastWheelShotTeam[MAX_VEHICLES][4];
static FIXER_v_LastWheelsDamageStatus[MAX_VEHICLES];

static const Float:FIXER_PAY_N_SPRAYS[][3] =
{
	{1025.05, -1024.23, 32.1},
 	{487.68, -1740.87, 11.13},
  	{-1420.73, 2583.37, 55.56},
    {-1904.39, 284.97, 40.75},
    {-2425.91, 1022.33, 50.10},
    {1975.60, 2162.16, 10.77},
    {2065.38, -1831.51, 13.25},
    {-99.55, 1118.36, 19.44},
    {721.07, -455.94, 16.04},
    {2393.74, 1493.01, 10.52}
};
static Float:FIXER_v_VehicleHealth[MAX_VEHICLES];

static FIXER_v_Interior[MAX_VEHICLES];

static const FIXER_VEHICLE_MODS[] =
{
	0b00000011001111000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000110100010011111111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001110110010011110000101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010101111000100011100000011, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011101110100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100011100000011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001100010000011101000100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001010000000011100111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010101111010100011100000001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001110100010011110000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001010000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010011110100010011111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100000100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001111100000011111000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011011100000011011100110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011000111010010011101110101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010101111100100011110001000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000010000011101110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100110100000111111001110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011001110000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001111111000011110010101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100111110000011110001100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010100101100010011111101010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001101101100011110000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100111100001111111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b11111100000000000000010000110111, 0b00000000000000000000000000000000, 0b00000010000111000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000011111111100110000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000001101110000111, 0b00000000000000000000000000000001, 0b00000001111000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011100111100000011111010010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001111001100011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011100011100000011111010110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010001111010000011100001001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100111100001111110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010100111000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010101111010000011101101100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b11111111111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000111111000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111111111110, 0b00000000000000000000000000000111, 0b11000000000000000000000000000000, 0b00000000000000000010000000000111,
	0b11111110000000000000011100000000, 0b00000000000000000000000000000011, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000011110000000000, 0b00000000000000000000011000000000,
	0b11001110000000000000011100000000, 0b11111111100000000000000000000000, 0b00000000111111111111111000000001, 0b00000000000000000000000000000111, 0b00111100000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000001111111100, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000001111000000000000000000, 0b00000000000000000001100000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000011111111110000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000011110000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000001000111, 0b00000000000000000000000000111110, 0b00111100000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000001110000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000001111, 0b00000000000000000000000000000000, 0b00000000000000111100000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000001111000000, 0b11000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100101100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011000101110010011111110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010010101100010011111110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011100111100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000
};

enum FIXER_e_TOGGLE
{
	FIXER_e_TIRE_POPPING,
	FIXER_e_INTERIOR_WEAPONS,
	FIXER_e_ADMIN_TELEPORT,
	FIXER_e_VEHICLE_FRIENDLYFIRE
};
static bool:FIXER_g_Toggle[FIXER_e_TOGGLE];

static PlayerText:FIXER_ptxt_GameText[MAX_PLAYERS][7];
static FIXER_p_GameTextTimer[MAX_PLAYERS][7];
static FIXER_p_GameTextFader[MAX_PLAYERS][7];

stock FIXER_AllowUpdate(bool:allow = true)
{
	FIXER_UPDATER = allow;

	if (allow)
	{
		FIXER_g_BlacklistDB = db_open("bans.db");
		db_query(FIXER_g_BlacklistDB, "CREATE TABLE IF NOT EXISTS `Members` (`Username` STRING, `Ip` STRING, `Reason` STRING, `DateStamp` INTEGER)");

		FIXER_g_Toggle[FIXER_e_TIRE_POPPING] = true;
		FIXER_g_Toggle[FIXER_e_INTERIOR_WEAPONS] = true;
		FIXER_g_Toggle[FIXER_e_ADMIN_TELEPORT] = false;
		FIXER_g_Toggle[FIXER_e_VEHICLE_FRIENDLYFIRE] = false;

		for (new i; i < MAX_VEHICLES; i++)
			FIXER_v_VehicleHealth[i] = 0.0;

		for (new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
		    if (IsPlayerConnected(i))
		    	OnPlayerConnect(i);
		}
	}
	else
	{
		db_close(FIXER_g_BlacklistDB);
	}
}

public OnPlayerConnect(playerid)
{
	if (FIXER_UPDATER)
	{
	    // Style 7 (vehicle name)
		FIXER_ptxt_GameText[playerid][0] = CreatePlayerTextDraw(playerid, 608.000000, 344.000000, " "),
		PlayerTextDrawLetterSize(playerid, FIXER_ptxt_GameText[playerid][0], 1.000000, 3.000000),
		PlayerTextDrawAlignment(playerid, FIXER_ptxt_GameText[playerid][0], 3),
		PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][0], 0x36682CFF),
		PlayerTextDrawSetShadow(playerid, FIXER_ptxt_GameText[playerid][0], 0),
		PlayerTextDrawSetOutline(playerid, FIXER_ptxt_GameText[playerid][0], 2),
		PlayerTextDrawBackgroundColor(playerid, FIXER_ptxt_GameText[playerid][0], 0x000000AA),
		PlayerTextDrawFont(playerid, FIXER_ptxt_GameText[playerid][0], 2),
		PlayerTextDrawSetProportional(playerid, FIXER_ptxt_GameText[playerid][0], 1),
		PlayerTextDrawUseBox(playerid, FIXER_ptxt_GameText[playerid][0], true),
		PlayerTextDrawBoxColor(playerid, FIXER_ptxt_GameText[playerid][0], 0x00000000),
		PlayerTextDrawTextSize(playerid, FIXER_ptxt_GameText[playerid][0], 10.0, 200.0);

		FIXER_p_GameTextTimer[playerid][0] = -1;

		// Style 8 (location name)
		FIXER_ptxt_GameText[playerid][1] = CreatePlayerTextDraw(playerid, 608.000000, 386.500000, " "),
		PlayerTextDrawLetterSize(playerid, FIXER_ptxt_GameText[playerid][1], 1.200000, 3.799998),
		PlayerTextDrawAlignment(playerid, FIXER_ptxt_GameText[playerid][1], 3),
		PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][1], 0xACCBF1FF),
		PlayerTextDrawSetShadow(playerid, FIXER_ptxt_GameText[playerid][1], 0),
		PlayerTextDrawSetOutline(playerid, FIXER_ptxt_GameText[playerid][1], 2),
		PlayerTextDrawBackgroundColor(playerid, FIXER_ptxt_GameText[playerid][1], 0x000000AA),
		PlayerTextDrawFont(playerid, FIXER_ptxt_GameText[playerid][1], 0),
		PlayerTextDrawSetProportional(playerid, FIXER_ptxt_GameText[playerid][1], 1),
		PlayerTextDrawUseBox(playerid, FIXER_ptxt_GameText[playerid][1], true),
		PlayerTextDrawBoxColor(playerid, FIXER_ptxt_GameText[playerid][1], 0x00000000),
		PlayerTextDrawTextSize(playerid, FIXER_ptxt_GameText[playerid][1], 10.0, 200.0);

		FIXER_p_GameTextTimer[playerid][1] = -1;

		// Style 9 (radio name)
		FIXER_ptxt_GameText[playerid][2] = CreatePlayerTextDraw(playerid, 320.000000, 22.000000, " "),
		PlayerTextDrawLetterSize(playerid, FIXER_ptxt_GameText[playerid][2], 0.600000, 1.899999),
		PlayerTextDrawAlignment(playerid, FIXER_ptxt_GameText[playerid][2], 2),
		PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][2], 0x906210FF),
		PlayerTextDrawSetShadow(playerid, FIXER_ptxt_GameText[playerid][2], 0),
		PlayerTextDrawSetOutline(playerid, FIXER_ptxt_GameText[playerid][2], 1),
		PlayerTextDrawBackgroundColor(playerid, FIXER_ptxt_GameText[playerid][2], 0x000000AA),
		PlayerTextDrawFont(playerid, FIXER_ptxt_GameText[playerid][2], 2),
		PlayerTextDrawSetProportional(playerid, FIXER_ptxt_GameText[playerid][2], 1),
		PlayerTextDrawUseBox(playerid, FIXER_ptxt_GameText[playerid][2], true),
		PlayerTextDrawBoxColor(playerid, FIXER_ptxt_GameText[playerid][2], 0x00000000),
		PlayerTextDrawTextSize(playerid, FIXER_ptxt_GameText[playerid][2], 200.0, 620.0);

		FIXER_p_GameTextTimer[playerid][2] = -1;

		// Style 10 (radio switch)
		FIXER_ptxt_GameText[playerid][3] = CreatePlayerTextDraw(playerid, 320.000000, 22.000000, " "),
		PlayerTextDrawLetterSize(playerid, FIXER_ptxt_GameText[playerid][3], 0.600000, 1.899999),
		PlayerTextDrawAlignment(playerid, FIXER_ptxt_GameText[playerid][3], 2),
		PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][3], 0x969696FF),
		PlayerTextDrawSetShadow(playerid, FIXER_ptxt_GameText[playerid][3], 0),
		PlayerTextDrawSetOutline(playerid, FIXER_ptxt_GameText[playerid][3], 1),
		PlayerTextDrawBackgroundColor(playerid, FIXER_ptxt_GameText[playerid][3], 0x000000AA),
		PlayerTextDrawFont(playerid, FIXER_ptxt_GameText[playerid][3], 2),
		PlayerTextDrawSetProportional(playerid, FIXER_ptxt_GameText[playerid][3], 1),
		PlayerTextDrawUseBox(playerid, FIXER_ptxt_GameText[playerid][3], true),
		PlayerTextDrawBoxColor(playerid, FIXER_ptxt_GameText[playerid][3], 0x00000000),
		PlayerTextDrawTextSize(playerid, FIXER_ptxt_GameText[playerid][3], 200.0, 620.0);

		FIXER_p_GameTextTimer[playerid][3] = -1;

		// Style 11 (positive money)
		FIXER_ptxt_GameText[playerid][4] = CreatePlayerTextDraw(playerid, 607.000000, 78.000000, " "),
		PlayerTextDrawLetterSize(playerid, FIXER_ptxt_GameText[playerid][4], 0.550000, 2.150000),
		PlayerTextDrawAlignment(playerid, FIXER_ptxt_GameText[playerid][4], 3),
		PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][4], 0x36682CFF),
		PlayerTextDrawSetShadow(playerid, FIXER_ptxt_GameText[playerid][4], 0),
		PlayerTextDrawSetOutline(playerid, FIXER_ptxt_GameText[playerid][4], 2),
		PlayerTextDrawBackgroundColor(playerid, FIXER_ptxt_GameText[playerid][4], 0x000000FF),
		PlayerTextDrawFont(playerid, FIXER_ptxt_GameText[playerid][4], 3),
		PlayerTextDrawSetProportional(playerid, FIXER_ptxt_GameText[playerid][4], 1),
		PlayerTextDrawUseBox(playerid, FIXER_ptxt_GameText[playerid][4], true),
		PlayerTextDrawBoxColor(playerid, FIXER_ptxt_GameText[playerid][4], 0x00000000),
		PlayerTextDrawTextSize(playerid, FIXER_ptxt_GameText[playerid][4], 10.0, 200.0);

		FIXER_p_GameTextTimer[playerid][4] = -1;

		// Style 12 (negative money)
		FIXER_ptxt_GameText[playerid][5] = CreatePlayerTextDraw(playerid, 607.000000, 78.000000, " "),
		PlayerTextDrawLetterSize(playerid, FIXER_ptxt_GameText[playerid][5], 0.550000, 2.150000),
		PlayerTextDrawAlignment(playerid, FIXER_ptxt_GameText[playerid][5], 3),
		PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][5], 0xB4191DFF),
		PlayerTextDrawSetShadow(playerid, FIXER_ptxt_GameText[playerid][5], 0),
		PlayerTextDrawSetOutline(playerid, FIXER_ptxt_GameText[playerid][5], 2),
		PlayerTextDrawBackgroundColor(playerid, FIXER_ptxt_GameText[playerid][5], 0x000000FF),
		PlayerTextDrawFont(playerid, FIXER_ptxt_GameText[playerid][5], 3),
		PlayerTextDrawSetProportional(playerid, FIXER_ptxt_GameText[playerid][5], 1),
		PlayerTextDrawUseBox(playerid, FIXER_ptxt_GameText[playerid][5], true),
		PlayerTextDrawBoxColor(playerid, FIXER_ptxt_GameText[playerid][5], 0x00000000),
		PlayerTextDrawTextSize(playerid, FIXER_ptxt_GameText[playerid][5], 10.0, 200.0);

		FIXER_p_GameTextTimer[playerid][5] = -1;

		// Style 13 (stunt)
		FIXER_ptxt_GameText[playerid][6] = CreatePlayerTextDraw(playerid, 380.000000, 341.000000, " "),
		PlayerTextDrawLetterSize(playerid, FIXER_ptxt_GameText[playerid][6], 0.579999, 2.400000),
		PlayerTextDrawTextSize(playerid, FIXER_ptxt_GameText[playerid][6], 40.000000, 460.000000),
		PlayerTextDrawAlignment(playerid, FIXER_ptxt_GameText[playerid][6], 2),
		PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][6], 0xD7D3CCFF),
		PlayerTextDrawUseBox(playerid, FIXER_ptxt_GameText[playerid][6], true),
		PlayerTextDrawBoxColor(playerid, FIXER_ptxt_GameText[playerid][6], 0),
		PlayerTextDrawSetShadow(playerid, FIXER_ptxt_GameText[playerid][6], 2),
		PlayerTextDrawSetOutline(playerid, FIXER_ptxt_GameText[playerid][6], 0),
		PlayerTextDrawBackgroundColor(playerid, FIXER_ptxt_GameText[playerid][6], 0x000000AA),
		PlayerTextDrawFont(playerid, FIXER_ptxt_GameText[playerid][6], 1),
		PlayerTextDrawSetProportional(playerid, FIXER_ptxt_GameText[playerid][6], 1);

		FIXER_p_GameTextTimer[playerid][6] = -1;
	}

	for (new i, j = sizeof (FIXER_ANIMATIONS); i < j; i++)
    	FIXER_p_AnimPrelaodTimer[playerid][i] = -1;

    for (new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
    {
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_USED] = false;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_MODEL] = 0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_BONE] = 0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_X] = 0.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_Y] = 0.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_Z] = 0.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_RX] = 0.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_RY] = 0.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_RZ] = 0.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_SX] = 1.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_SY] = 1.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_SZ] = 1.0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_COLOR1] = 0;
   	 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_COLOR2] = 0;
	}

	GetPlayerIp(playerid, FIXER_p_Ip[playerid], 18);

    FIXER_p_Skin[playerid] = 0;

    FIXER_p_CurrentWeapon[playerid] = 0;

	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_CHECK] = false;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PX] = 0.0;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PY] = 0.0;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PZ] = 0.0;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_LX] = 0.0;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_LY] = 0.0;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_UX] = 0.0;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_UY] = 0.0;

	FIXER_p_ToggleSpecTick[playerid] = -1;
	FIXER_p_ToggleSpecTimer[playerid] = -1;

	FIXER_p_LastClickedMapTick[playerid] = 0;

    FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE] = false;
    FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TIMER] = -1;
    FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TYPE] = 0;
    FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_REASON][0] = EOS;

    DisablePlayerCheckpoint(playerid);
    DisablePlayerRaceCheckpoint(playerid);
	SetSpawnInfo(playerid, NO_TEAM, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	ShowPlayerDialog(playerid, -1, 0, "", "", "", "");
	SetPlayerColor(playerid, 0xFFFFFFFF);

	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_ACTIVE] = false;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][0] = 0.0;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][1] = 0.0;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][2] = 0.0;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][3] = 0.0;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_HEALTH] = 100.0;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_ARMOR] = 0.0;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_SKIN] = 0;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_COLOR] = 0xFFFFFFFF;
	FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_TEAM] = NO_TEAM;
	for (new i; i < 14; i++)
	{
		FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_WEAPONS][i] = 0;
		FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_AMMOS][i] = 0;
	}

	FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_ACTIVE] = false;
	FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][0] = 0.0;
	FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][1] = 0.0;
	FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][2] = 0.0;
	FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_TICKCOUNT] = 0;

	new name[MAX_PLAYER_NAME], ip[18];
    GetPlayerName(playerid, name, sizeof (name));
	GetPlayerIp(playerid, ip, sizeof (ip));

	new dstring[256];
 	format(dstring, sizeof (dstring), "SELECT * FROM `Members` WHERE `Username` = '%q' OR `Ip` = '%q'", name, ip);
 	new DBResult:result = db_query(FIXER_g_BlacklistDB, dstring);
 	if (db_num_rows(result) > 0)
 	{
		db_free_result(result);

		if (CallRemoteFunction("OnBannedPlayerConnect", "i", playerid) >= 1)
			return Kick(playerid);
 	}
 	db_free_result(result);

    #if defined FIXER_OnPlayerConnect
		return FIXER_OnPlayerConnect(playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif
#define OnPlayerConnect FIXER_OnPlayerConnect
#if defined FIXER_OnPlayerConnect
	forward FIXER_OnPlayerConnect(playerid);
#endif

#if defined OnBannedPlayerConnect
	forward OnBannedPlayerConnect(playerid);
#endif

public OnPlayerDisconnect(playerid, reason)
{
	KillTimer(FIXER_p_ToggleSpecTimer[playerid]);

    new Float:cam[3];
	GetPlayerCameraPos(playerid, cam[0], cam[1], cam[2]);

	new Float:fpos[3];
	GetPlayerPos(playerid, fpos[0], fpos[1], fpos[2]);

	if (!GetPlayerInterior(playerid))
		cam[2] += 5.0;
 	else
 		cam[2] += 0.5;

 	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == playerid)
		{
 			if (FIXER_UpdatePlayerSpectateID(i) == INVALID_PLAYER_ID)
 			{
			 	SetPlayerCameraPos(i, cam[0], cam[1], cam[2]);
				SetPlayerCameraLookAt(i, fpos[0], fpos[1], fpos[2]);
 			}
  		}
	}

	if (FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE])
	{
		KillTimer(FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TIMER]);

		switch (FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TYPE])
		{
		    case 2:
		    {
		        new name[MAX_PLAYER_NAME], ip[18];
			    GetPlayerName(playerid, name, sizeof (name));
			    GetPlayerIp(playerid, ip, sizeof (ip));

				new bstring[256];
			 	format(bstring, sizeof (bstring), "INSERT INTO `Members` (`Username`, `Ip`, `Reason`, `DateStamp`) VALUES ('%q', '%q', '%q', %i)", name, ip, "", getdate());
			 	db_query(FIXER_g_BlacklistDB, bstring);
		    }

		    case 3:
		    {
		        new name[MAX_PLAYER_NAME], ip[18];
			    GetPlayerName(playerid, name, sizeof (name));
			    GetPlayerIp(playerid, ip, sizeof (ip));

				new bstring[256];
			 	format(bstring, sizeof (bstring), "INSERT INTO `Members` (`Username`, `Ip`, `Reason`, `DateStamp`) VALUES ('%q', '%q', '%q', %i)", name, ip, FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_REASON], getdate());
			 	db_query(FIXER_g_BlacklistDB, bstring);
		    }
		}

        FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE] = false;
		Kick(playerid);
		return 0;
	}

    #if defined FIXER_OnPlayerDisconnect
       	return FIXER_OnPlayerDisconnect(playerid, reason);
	#else
	   	return 1;
	#endif
}
#if defined _ALS_OnPlayerDisconnect
    #undef OnPlayerDisconnect
#else
    #define _ALS_OnPlayerDisconnect
#endif
#define OnPlayerDisconnect FIXER_OnPlayerDisconnect
#if defined FIXER_OnPlayerDisconnect
    forward FIXER_OnPlayerDisconnect(playerid, reason);
#endif

public OnPlayerSpawn(playerid)
{
	if (FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_ACTIVE])
	{
	    FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_ACTIVE] = false;

	    SetPlayerPos(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][0], FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][1], FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][2]);
		SetPlayerFacingAngle(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_POS][3]);
		SetPlayerHealth(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_HEALTH]);
		SetPlayerArmour(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_ARMOR]);
		SetPlayerSkin(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_SKIN]);
		SetPlayerColor(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_COLOR]);
		SetPlayerTeam(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_TEAM]);
		ResetPlayerWeapons(playerid);
		for (new i; i < 14; i++)
			GivePlayerWeapon(playerid, FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_WEAPONS][i], FIXER_p_SyncData[playerid][FIXER_e_SYNC_DATA_AMMOS][i]);

		return 1;
	}

	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == playerid)
			PlayerSpectatePlayer(i, playerid, FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_MODE]);
 	}

 	#if defined FIXER_OnPlayerSpawn
 		return FIXER_OnPlayerSpawn(playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerSpawn
	#undef OnPlayerSpawn
#else
    #define _ALS_OnPlayerSpawn
#endif
#define OnPlayerSpawn FIXER_OnPlayerSpawn
#if defined FIXER_OnPlayerSpawn
    forward FIXER_OnPlayerSpawn(playerid);
#endif

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == playerid)
 			SetPlayerInterior(i, newinteriorid);
  	}

	#if defined FIXER_OnPlayerInteriorChange
	  	return FIXER_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
	#else
	   	return 1;
	#endif
}
#if defined _ALS_OnPlayerInteriorChange
    #undef OnPlayerInteriorChange
#else
    #define _ALS_OnPlayerInteriorChange
#endif
#define OnPlayerInteriorChange FIXER_OnPlayerInteriorChange
#if defined FIXER_OnPlayerInteriorChange
    forward FIXER_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
#endif

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    if (newkeys & KEY_FIRE)
	    {
	    	new bool:ret = true;
			#if defined FIXER_OnPlayerKeyStateChange
		       	ret = bool:FIXER_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
			#endif
		    if (ret)
		    {
                if (FIXER_UpdatePlayerSpectateID(playerid) == INVALID_PLAYER_ID)
                {
                    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
                }
		    }
		    return ret;
	    }
	    else if (newkeys & KEY_AIM)
	    {
	    	new bool:ret = true;
			#if defined FIXER_OnPlayerKeyStateChange
		       	ret = bool:FIXER_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
			#endif
		    if (ret)
		    {
                if (FIXER_UpdatePlayerSpectateID(playerid, false) == INVALID_PLAYER_ID)
                {
                    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
                }
		    }
		    return ret;
	    }
	}
	else
	{
		if ((newkeys & (KEY_AIM)) == (KEY_AIM))
		{
		    switch (GetPlayerWeapon(playerid))
			{
				case WEAPON_SNIPER, WEAPON_ROCKETLAUNCHER, WEAPON_HEATSEEKER, WEAPON_CAMERA:
				{
				    for (new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
					{
						if (IsPlayerAttachedObjectSlotUsed(playerid, i))
						{
					    	RemovePlayerAttachedObject(playerid, i);
						}
			        }
			    }
			}
		}
		else if (((newkeys & (KEY_AIM)) != (KEY_AIM)) && ((oldkeys & (KEY_AIM)) == (KEY_AIM)))
		{
		    for (new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
			{
				if (!IsPlayerAttachedObjectSlotUsed(playerid, i) && FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_USED])
			    {
					SetPlayerAttachedObject(playerid, i,
												FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_MODEL],
												FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_BONE],
												FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_X], FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_Y], FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_Z],
											 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_RX], FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_RY], FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_RZ],
											 	FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_SX], FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_SY], FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_SZ],
												FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_COLOR1], FIXER_p_Attachment[playerid][i][FIXER_e_PLAYER_ATT_COLOR2]);
				}
			}
		}
	}

	#if defined FIXER_OnPlayerKeyStateChange
       	return FIXER_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#else
	   	return 1;
	#endif
}
#if defined _ALS_OnPlayerKeyStateChange
    #undef OnPlayerKeyStateChange
#else
    #define _ALS_OnPlayerKeyStateChange
#endif
#define OnPlayerKeyStateChange FIXER_OnPlayerKeyStateChange
#if defined FIXER_OnPlayerKeyStateChange
    forward FIXER_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
#endif

public OnPlayerUpdate(playerid)
{
    if (FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE])
		return 0;

	if (!FIXER_UPDATER)
	{
	    #if defined FIXER_OnPlayerUpdate
			return FIXER_OnPlayerUpdate(playerid);
		#else
			return 1;
		#endif
	}

	if (!FIXER_g_Toggle[FIXER_e_INTERIOR_WEAPONS] && GetPlayerInterior(playerid) > 0 && GetPlayerWeapon(playerid) > 0)
	{
	    FIXER_p_CurrentWeapon[playerid] = 0;
		SetPlayerArmedWeapon(playerid, 0);
	}

	if (FIXER_p_LastClickedMapTick[playerid] > 0)
	{
		if ((FIXER_GetTickCount() - FIXER_p_LastClickedMapTick[playerid]) >= 1000)
		{
	    	FIXER_p_LastClickedMapTick[playerid] = 0;

	    	new Float:x, Float:y, Float:z;
	    	GetPlayerPos(playerid, x, y, z);
	    	SetPlayerPosFindZ(playerid, x, y, z);
		}
	}

	if (FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_CHECK])
	{
		new ud, lr, keys;
		GetPlayerKeys(playerid, keys, ud, lr);
		if (keys & KEY_AIM)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);

			if (FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_LX] < x < FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_UX] && FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_LY] < y < FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_UY])
			{
				FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PX] = x;
				FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PY] = y;
				FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PZ] = z;
			}
			else
			{
				SetPlayerPos(playerid, FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PX], FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PY], FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PZ]);
				GameTextForPlayer(playerid, "~w~~h~Saty within the ~r~world boundries", 5000, 3);
			}
		}
	}

	if (FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_ACTIVE])
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerVelocity(playerid, x, y, z);
	  	if (x == 0 && y == 0 && z == 0)
	    {
			FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_ACTIVE] = false;
			ClearAnimations(playerid);
		}
		else
		{
			if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_ENTER_VEHICLE)
			{
				if ((GetTickCount() - FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_TICKCOUNT]) > 350)
		  		{
					FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_ACTIVE] = false;
					ClearAnimations(playerid);
		        }
			}
			else if (GetPlayerDistanceFromPoint(playerid, FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][0], FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][1], FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][2]) > 2.5)
			{
				FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_ACTIVE] = false;
				ClearAnimations(playerid);
			}
		}
	}

	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (FIXER_v_VehicleHealth[vehicleid] > 100.0)
		{
			new Float:health;
			GetVehicleHealth(vehicleid, health);

			if (FIXER_v_VehicleHealth[vehicleid] < health)
			{
				for (new i, j = sizeof (FIXER_PAY_N_SPRAYS); i < j; i++)
		    	{
		       		if (IsPlayerInRangeOfPoint(playerid, 10.0, FIXER_PAY_N_SPRAYS[i][0], FIXER_PAY_N_SPRAYS[i][1], FIXER_PAY_N_SPRAYS[i][2]))
		            {
		               	CallRemoteFunction("OnVehicleRespray", "iiii", playerid, vehicleid, -1, -1);
		                break;
		            }
		        }

				FIXER_v_VehicleHealth[vehicleid] = health;
			}
		}
	}

	switch (FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_TYPE])
	{
	    case SPECTATE_TYPE_PLAYER:
	    {
	        new target_worldid = GetPlayerVirtualWorld(FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID]);
	        if (GetPlayerVirtualWorld(playerid) != target_worldid)
	        	SetPlayerVirtualWorld(playerid, target_worldid);
	    }

	    case SPECTATE_TYPE_VEHICLE:
	    {
	        new target_interiorid = FIXER_v_Interior[FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID]];
	        if (GetPlayerInterior(playerid) != target_interiorid)
	        	SetPlayerInterior(playerid, target_interiorid);
	    }
	}

	#if defined FIXER_OnPlayerUpdate
		return FIXER_OnPlayerUpdate(playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerUpdate
	#undef OnPlayerUpdate
#else
	#define _ALS_OnPlayerUpdate
#endif
#define OnPlayerUpdate FIXER_OnPlayerUpdate
#if defined FIXER_OnPlayerUpdate
	forward FIXER_OnPlayerUpdate(playerid);
#endif

public OnPlayerDeath(playerid, killerid, reason)
{
	if (!FIXER_UPDATER)
	{
	    #if defined FIXER_OnPlayerDeath
			return FIXER_OnPlayerDeath(playerid, killerid, reason);
		#else
			return 1;
		#endif
	}

    FIXER_p_LastClickedMapTick[playerid] = 0;

    new Float:cam[3];
	GetPlayerCameraPos(playerid, cam[0], cam[1], cam[2]);

	new Float:fpos[3];
	GetPlayerPos(playerid, fpos[0], fpos[1], fpos[2]);

	if (!GetPlayerInterior(playerid))
		cam[2] += 5.0;
 	else
 		cam[2] += 0.5;

	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == playerid)
		{
			SetPlayerCameraPos(i, cam[0], cam[1], cam[2]);
			SetPlayerCameraLookAt(i, fpos[0], fpos[1], fpos[2]);
		}
 	}

	#if defined FIXER_OnPlayerDeath
		return FIXER_OnPlayerDeath(playerid, killerid, reason);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerDeath
	#undef OnPlayerDeath
#else
	#define _ALS_OnPlayerDeath
#endif
#define OnPlayerDeath FIXER_OnPlayerDeath
#if defined FIXER_OnPlayerDeath
	forward FIXER_OnPlayerDeath(playerid, killerid, reason);
#endif

public OnVehicleMod(playerid, vehicleid, componentid)
{
    new modelid = GetVehicleModel(vehicleid);
	if (400 <= modelid <= 611)
	{
		switch (componentid)
		{
			case 1000..1191:
			{
				if (FIXER_VEHICLE_MODS[(modelid - 400) * 6 + (componentid - 1000 >>> 5)] & 1 << (componentid - 1000 & 0b00011111))
				{
					GetVehicleHealth(vehicleid, FIXER_v_VehicleHealth[vehicleid]);

					#if defined FIXER_OnVehicleMod
						return FIXER_OnVehicleMod(playerid, vehicleid, componentid);
					#else
						return 1;
					#endif
				}
			}
			case 1192, 1193:
			{
				if (modelid == 576)
				{
					GetVehicleHealth(vehicleid, FIXER_v_VehicleHealth[vehicleid]);

					#if defined FIXER_OnVehicleMod
						return FIXER_OnVehicleMod(playerid, vehicleid, componentid);
					#else
						return 1;
					#endif
				}
			}
		}
	}

	DestroyVehicle(vehicleid);
	Kick(playerid);
 	return 0;
}
#if defined _ALS_OnVehicleMod
	#undef OnVehicleMod
#else
	#define _ALS_OnVehicleMod
#endif
#define OnVehicleMod FIXER_OnVehicleMod
#if defined FIXER_OnVehicleMod
	forward FIXER_OnVehicleMod(playerid, vehicleid, componentid);
#endif

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	GetVehicleHealth(vehicleid, FIXER_v_VehicleHealth[vehicleid]);

	#if defined FIXER_OnVehicleRespray
		return FIXER_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleRespray
	#undef OnVehicleRespray
#else
	#define _ALS_OnVehicleRespray
#endif
#define OnVehicleRespray FIXER_OnVehicleRespray
#if defined FIXER_OnVehicleRespray
	forward FIXER_OnVehicleRespray(playerid, vehicleid, color1, color2);
#endif

public OnVehicleSpawn(vehicleid)
{
	GetVehicleHealth(vehicleid, FIXER_v_VehicleHealth[vehicleid]);

	if (!FIXER_UPDATER)
	{
	    #if defined FIXER_OnVehicleSpawn
			return FIXER_OnVehicleSpawn(vehicleid);
		#else
			return 1;
		#endif
	}

    for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_VEHICLE && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == vehicleid)
			PlayerSpectateVehicle(i, vehicleid, FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_MODE]);
 	}

	#if defined FIXER_OnVehicleSpawn
		return FIXER_OnVehicleSpawn(vehicleid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleSpawn
	#undef OnVehicleSpawn
#else
	#define _ALS_OnVehicleSpawn
#endif
#define OnVehicleSpawn FIXER_OnVehicleSpawn
#if defined FIXER_OnVehicleSpawn
	forward FIXER_OnVehicleSpawn(vehicleid);
#endif

public OnVehicleDeath(vehicleid, killerid)
{
	GetVehicleHealth(vehicleid, FIXER_v_VehicleHealth[vehicleid]);

	if (!FIXER_UPDATER)
	{
		#if defined FIXER_OnVehicleDeath
			return FIXER_OnVehicleDeath(vehicleid, killerid);
		#else
			return 1;
		#endif
	}

	new Float:pos[3];
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
 	pos[2] += 5.0;

	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_VEHICLE && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == vehicleid)
		{
			SetPlayerCameraPos(i, pos[0], pos[1], pos[2]);
			SetPlayerCameraLookAt(i, pos[0], pos[1], pos[2]);
		}
 	}

	#if defined FIXER_OnVehicleDeath
		return FIXER_OnVehicleDeath(vehicleid, killerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleDeath
	#undef OnVehicleDeath
#else
	#define _ALS_OnVehicleDeath
#endif
#define OnVehicleDeath FIXER_OnVehicleDeath
#if defined FIXER_OnVehicleDeath
	forward FIXER_OnVehicleDeath(vehicleid, killerid);
#endif

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if (!FIXER_UPDATER)
	{
		#if defined FIXER_OnVehicleDamageStatusUpd
			return FIXER_OnVehicleDamageStatusUpd(vehicleid, playerid);
		#else
			return 1;
		#endif
	}

	if (!FIXER_g_Toggle[FIXER_e_TIRE_POPPING])
	{
	    new _panels, _doors, _lights, _tires;
	    GetVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);

	    _tires = 0;

	    UpdateVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);
	}
	else
	{
	    for (new i; i < 4; i++)
	    {
			if (GetPlayerTeam(playerid) != NO_TEAM && FIXER_v_LastWheelShotTeam[vehicleid][i] != NO_TEAM && GetPlayerTeam(playerid) == FIXER_v_LastWheelShotTeam[vehicleid][i])
			{
	    		new _panels, _doors, _lights, _tires;
	    		GetVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);

				_tires = FIXER_v_LastWheelsDamageStatus[vehicleid];

			    UpdateVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);
		    }
	    }
	}

	#if defined FIXER_OnVehicleDamageStatusUpd
		return FIXER_OnVehicleDamageStatusUpd(vehicleid, playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleDamageStatusUpd
	#undef OnVehicleDamageStatusUpdate
#else
	#define _ALS_OnVehicleDamageStatusUpd
#endif
#define OnVehicleDamageStatusUpdate FIXER_OnVehicleDamageStatusUpd
#if defined FIXER_OnVehicleDamageStatusUpd
	forward FIXER_OnVehicleDamageStatusUpd(vehicleid, playerid);
#endif

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if (weaponid == WEAPON_KNIFE && _:amount == _:0.0)
	{
		if (GetPlayerTeam(playerid) != NO_TEAM && GetPlayerTeam(damagedid) != NO_TEAM && GetPlayerTeam(playerid) == GetPlayerTeam(damagedid))
		{
		    FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_ACTIVE] = true;

		    GetPlayerPos(damagedid, FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_POS][0], FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_POS][1], FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_POS][2]);
			GetPlayerFacingAngle(damagedid, FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_POS][3]);
			GetPlayerHealth(damagedid, FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_HEALTH]);
			GetPlayerArmour(damagedid, FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_ARMOR]);
			FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_SKIN] = GetPlayerSkin(damagedid);
			FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_COLOR] = GetPlayerColor(damagedid);
			FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_TEAM] = GetPlayerTeam(damagedid);
			for (new i; i < 14; i++)
				GetPlayerWeaponData(damagedid, i, FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_WEAPONS][i], FIXER_p_SyncData[damagedid][FIXER_e_SYNC_DATA_AMMOS][i]);

			SpawnPlayer(damagedid);

        	GameTextForPlayer(playerid, "~w~~h~Don't knife ~r~teammates", 5000, 3);

			#if defined FIXER_OnPlayerGiveDamage
				return FIXER_OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart);
			#else
				return 0;
			#endif
		}
	}

	#if defined FIXER_OnPlayerGiveDamage
		return FIXER_OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart);
	#else
		return 0;
	#endif
}
#if defined _ALS_OnPlayerGiveDamage
    #undef OnPlayerGiveDamage
#else
    #define _ALS_OnPlayerGiveDamage
#endif
#define OnPlayerGiveDamage FIXER_OnPlayerGiveDamage
#if defined FIXER_OnPlayerGiveDamage
	forward FIXER_OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart);
#endif

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if (weaponid < 22 || weaponid > 38)
 		return Kick(playerid);

	new Float:z;
    GetPlayerPos(playerid, z, z, z);
	if (!(-20000.0 <= z <= 20000.0))
 		return Kick(playerid);

	if (!FIXER_UPDATER)
	{
	    #if defined FIXER_OnPlayerWeaponShot
			return FIXER_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
		#else
			return 1;
		#endif
	}

	if (hittype == BULLET_HIT_TYPE_VEHICLE)
	{
		new Float:fSet[6];
	 	new modelid = GetVehicleModel(hitid);
	  	GetVehicleModelInfo(modelid, VEHICLE_MODEL_INFO_WHEELSFRONT, fSet[0], fSet[1], fSet[2]);
	   	GetVehicleModelInfo(modelid, VEHICLE_MODEL_INFO_WHEELSREAR, fSet[3], fSet[4], fSet[5]);

		if (fX >= fSet[0] - 2.4 && fX <= fSet[0] && fY >= fSet[1] - 0.4 && fY <= fSet[1] + 0.4 && fZ >= fSet[2] - 0.4 && fZ <= fSet[2] + 0.4)
	 	{
			FIXER_v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid]);
	    }
	    else if (fX >= fSet[0] - 0.4 && fX <= fSet[0] + 0.4 && fY >= fSet[1] - 0.4 && fY <= fSet[1] + 0.4 && fZ >= fSet[2] - 0.4 && fZ <= fSet[2] + 0.4)
	    {
			FIXER_v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid]);
	    }
	    else if (fX >= fSet[3] - 2.4 && fX <= fSet[3] && fY >= fSet[4] - 0.4 && fY <= fSet[4] + 0.4 && fZ >= fSet[5] - 0.4 && fZ <= fSet[5] + 0.4)
	    {
			FIXER_v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid]);
	    }
	    else if (fX >= fSet[3] - 0.4 && fX <= fSet[3] + 0.4 && fY >= fSet[4] - 0.4 && fY <= fSet[4] + 0.4 && fZ >= fSet[5] - 0.4 && fZ <= fSet[5] + 0.4)
	    {
			FIXER_v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid], FIXER_v_LastWheelsDamageStatus[hitid]);
	    }
    }

    #if defined FIXER_OnPlayerWeaponShot
		return FIXER_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerWeaponShot
   #undef OnPlayerWeaponShot
#else
    #define _ALS_OnPlayerWeaponShot
#endif
#define OnPlayerWeaponShot FIXER_OnPlayerWeaponShot
#if defined FIXER_OnPlayerWeaponShot
	forward FIXER_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
#endif

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if (!FIXER_UPDATER)
	{
	    #if defined S_OnPlayerClickMap
			return S_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
		#else
			return 1;
		#endif
	}

	if (FIXER_g_Toggle[FIXER_e_ADMIN_TELEPORT])
	{
	    if (IsPlayerAdmin(playerid))
	    {
    		SetPlayerPosFindZ(playerid, fX, fY, 500.0);
			FIXER_p_LastClickedMapTick[playerid] = 0;
		}
	}

    #if defined S_OnPlayerClickMap
		return S_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerClickMap
   #undef OnPlayerClickMap
#else
    #define _ALS_OnPlayerClickMap
#endif
#define OnPlayerClickMap S_OnPlayerClickMap
#if defined S_OnPlayerClickMap
	forward S_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
#endif

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if (ispassenger)
   	{
		FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_ACTIVE] = true;
		FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_TICKCOUNT] = GetTickCount();
        GetVehiclePos(vehicleid, FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][0], FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][1], FIXER_p_GbugData[playerid][FIXER_e_GBUG_DATA_VPOS][2]);
	}

	#if defined FIXER_OnPlayerEnterVehicle
		return FIXER_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerEnterVehicle
	#undef OnPlayerEnterVehicle
#else
	#define _ALS_OnPlayerEnterVehicle
#endif
#define OnPlayerEnterVehicle FIXER_OnPlayerEnterVehicle
#if defined FIXER_OnPlayerEnterVehicle
	forward FIXER_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
#endif

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if (newstate == PLAYER_STATE_DRIVER)
	{
	    new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		if (GetPlayerWeapon(playerid) == 34 && (model == 520 || model == 425))
		{
	    	FIXER_p_CurrentWeapon[playerid] = 0;
	    	SetPlayerArmedWeapon(playerid, 0);
			return 0;
		}
		else
			FIXER_p_CurrentWeapon[playerid] = GetPlayerWeapon(playerid);
	}

	if (!FIXER_UPDATER)
	{
		#if defined FIXER_OnPlayerStateChange
			return FIXER_OnPlayerStateChange(playerid, newstate, oldstate);
		#else
			return 1;
		#endif
	}

	if (newstate == PLAYER_STATE_SPECTATING)
	{
	    new Float:cam[3];
		GetPlayerCameraPos(playerid, cam[0], cam[1], cam[2]);

		new Float:fpos[3];
		GetPlayerPos(playerid, fpos[0], fpos[1], fpos[2]);

		if (!GetPlayerInterior(playerid))
			cam[2] += 5.0;
	 	else
	 		cam[2] += 0.5;

		for (new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i) && i != playerid && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == playerid)
			{
	 			if (FIXER_UpdatePlayerSpectateID(i) == INVALID_PLAYER_ID)
	 			{
				 	SetPlayerCameraPos(i, cam[0], cam[1], cam[2]);
					SetPlayerCameraLookAt(i, fpos[0], fpos[1], fpos[2]);
	 			}
	  		}
		}
  	}
	else if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_ONFOOT || newstate == PLAYER_STATE_SPAWNED)
	{
		for (new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i) && i != playerid && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_ID] == playerid)
	 			FIXER_PlayerSpectatePlayer(i, playerid, FIXER_p_SpecData[i][FIXER_e_SPEC_DATA_MODE]);
	  	}
  	}

	#if defined FIXER_OnPlayerStateChange
		return FIXER_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerStateChange
	#undef OnPlayerStateChange
#else
	#define _ALS_OnPlayerStateChange
#endif
#define OnPlayerStateChange FIXER_OnPlayerStateChange
#if defined FIXER_OnPlayerStateChange
	forward FIXER_OnPlayerStateChange(playerid, newstate, oldstate);
#endif

stock FIXER_ClearAnimations(playerid, forcesync = 0)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
		return ApplyAnimation(playerid, "PED", "CAR_SIT", 4.0, 0, 0, 0, 0, 1, forcesync);

	new ret = ClearAnimations(playerid, forcesync);

	ApplyAnimation(playerid, "PED", "IDLE_STANCE", 4.0, 0, 0, 0, 0, 1, forcesync);
	ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 1, forcesync);
	ApplyAnimation(playerid, "PED", "WALK_PLAYER", 4.0, 0, 0, 0, 0, 1, forcesync);

	return ret;
}
#if defined _ALS_ClearAnimations
    #undef ClearAnimations
#else
    #define _ALS_ClearAnimations
#endif
#define ClearAnimations FIXER_ClearAnimations

stock FIXER_ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0, delay = 250)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	for (new i, j = sizeof(FIXER_ANIMATIONS); i < j; i ++)
	{
		if (!strcmp(animlib, FIXER_ANIMATIONS[i], true))
	    {
		    if (FIXER_p_AnimPrelaodTimer[playerid][i] == -1)
			{
				FIXER_p_AnimPrelaodTimer[playerid][i] = SetTimerEx("FIXER_OnAnimPreload", delay, false, "issfiiiiii", playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
				CallRemoteFunction("FIXER_OnAnimProcessed", "iii", playerid, i, FIXER_p_AnimPrelaodTimer[playerid][i]);
			}
	        return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	    }
    }

	return 0;
}
#if defined _ALS_ApplyAnimation
  	#undef ApplyAnimation
#else
  	#define _ALS_ApplyAnimation
#endif
#define ApplyAnimation FIXER_ApplyAnimation

forward FIXER_OnAnimPreload(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync);
public 	FIXER_OnAnimPreload(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

forward FIXER_OnAnimProcessed(playerid, i, set);
public	FIXER_OnAnimProcessed(playerid, i, set)
{
    FIXER_p_AnimPrelaodTimer[playerid][i] = set;
}

stock FIXER_SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0, materialcolor1 = 0, materialcolor2 = 0)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (SetPlayerAttachedObject(playerid, index, modelid, bone, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, materialcolor1, materialcolor2))
	{
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_MODEL] = modelid;

		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_BONE] = bone;

		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_X] = fOffsetX;
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_Y] = fOffsetY;
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_Z] = fOffsetZ;

		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_RX] = fRotX;
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_RY] = fRotY;
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_RZ] = fRotZ;

		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_SX] = fScaleX;
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_SY] = fScaleY;
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_SZ] = fScaleZ;

		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_COLOR1] = materialcolor1;
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_COLOR2] = materialcolor2;

		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_USED] = true;

		return 1;
	}

	return 0;
}
#if defined _ALS_SetPlayerAttachedObject
    #undef SetPlayerAttachedObject
#else
	#define _ALS_SetPlayerAttachedObject
#endif
#define SetPlayerAttachedObject FIXER_SetPlayerAttachedObject

stock FIXER_RemovePlayerAttached(playerid, index)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (RemovePlayerAttachedObject(playerid, index))
	{
		FIXER_p_Attachment[playerid][index][FIXER_e_PLAYER_ATT_USED] = false;
		return 1;
	}

	return 0;
}
#if defined _ALS_RemovePlayerAttachedObject
    #undef RemovePlayerAttachedObject
#else
    #define _ALS_RemovePlayerAttachedObject
#endif
#define RemovePlayerAttachedObject FIXER_RemovePlayerAttached

stock FIXER_SetPlayerCheckpoint(playerid, Float:x, Float:y, Float:z, Float:size)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	DisablePlayerCheckpoint(playerid);

   	if (FIXER_p_CheckpointTimer[playerid][0])
    	KillTimer(FIXER_p_CheckpointTimer[playerid][0]);
    FIXER_p_CheckpointTimer[playerid][0] = SetTimerEx("OnPlayerCheckpointSet", 250, false, "iifffffff", playerid, -1, x, y, z, size, 0.0, 0.0, 0.0);

	return 1;
}
#if defined _ALS_SetPlayerCheckpoint
    #undef SetPlayerCheckpoint
#else
	#define _ALS_SetPlayerCheckpoint
#endif
#define SetPlayerCheckpoint FIXER_SetPlayerCheckpoint

stock FIXER_SetPlayerRaceCheckpoint(playerid, type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	DisablePlayerRaceCheckpoint(playerid);

    if (FIXER_p_CheckpointTimer[playerid][1])
    	KillTimer(FIXER_p_CheckpointTimer[playerid][1]);
    FIXER_p_CheckpointTimer[playerid][1] = SetTimerEx("OnPlayerCheckpointSet", 250, false, "iifffffff", playerid, type, x, y, z, size, nextx, nexty, nextz);

	return 1;
}
#if defined _ALS_SetPlayerRaceCheckpoint
    #undef SetPlayerRaceCheckpoint
#else
	#define _ALS_SetPlayerRaceCheckpoint
#endif
#define SetPlayerRaceCheckpoint FIXER_SetPlayerRaceCheckpoint

forward OnPlayerCheckpointSet(playerid, type, Float:x, Float:y, Float:z, Float:size, Float:nextx, Float:nexty, Float:nextz);
public 	OnPlayerCheckpointSet(playerid, type, Float:x, Float:y, Float:z, Float:size, Float:nextx, Float:nexty, Float:nextz)
{
	if (type == -1)
		SetPlayerCheckpoint(playerid, x, y, z, size);
	else
		SetPlayerRaceCheckpoint(playerid, type, x, y, z, nextx, nexty, nextz, size);

	FIXER_p_CheckpointTimer[playerid][1] = 0;
}

stock FIXER_GetPlayerIp(playerid, ip[], len)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	return strcat((ip[0] = EOS, ip), FIXER_p_Ip[playerid], len);
}
#if defined _ALS_GetPlayerIp
	#undef GetPlayerIp
#else
	#define _ALS_GetPlayerIp
#endif
#define GetPlayerIp FIXER_GetPlayerIp

stock FIXER_SetPlayerSkin(playerid, skinid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new seatid = GetPlayerVehicleSeat(playerid);

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z);

		new ret = SetPlayerSkin(playerid, skinid);

		CallRemoteFunction("FIXER_OnPlayerSkinSet", "ii", playerid, skinid);

		PutPlayerInVehicle(playerid, vehicleid, seatid);

		return ret;
	}

	return SetPlayerSkin(playerid, skinid);
}
#if defined _ALS_SetPlayerSkin
	#undef SetPlayerSkin
#else
	#define _ALS_SetPlayerSkin
#endif
#define SetPlayerSkin FIXER_SetPlayerSkin

forward FIXER_OnPlayerSkinSet(playerid, skinid);
public  FIXER_OnPlayerSkinSet(playerid, skinid)
{
	FIXER_p_Skin[playerid] = skinid;
}

stock FIXER_GetPlayerSkin(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	return FIXER_p_Skin[playerid];
}
#if defined _ALS_GetPlayerSkin
	#undef GetPlayerSkin
#else
	#define _ALS_GetPlayerSkin
#endif
#define GetPlayerSkin FIXER_GetPlayerSkin

stock FIXER_SetPlayerArmedWeapon(playerid, weaponid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

    new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if (weaponid == 34 && (model == 520 || model == 425))
	{
    	FIXER_p_CurrentWeapon[playerid] = 0;
		return SetPlayerArmedWeapon(playerid, 0);
	}

    FIXER_p_CurrentWeapon[playerid] = weaponid;
    return SetPlayerArmedWeapon(playerid, weaponid);
}
#if defined _ALS_SetPlayerArmedWeapon
   #undef SetPlayerArmedWeapon
#else
    #define _ALS_SetPlayerArmedWeapon
#endif
#define SetPlayerArmedWeapon FIXER_SetPlayerArmedWeapon

stock FIXER_GivePlayerWeapon(playerid, weaponid, ammo)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

    FIXER_p_CurrentWeapon[playerid] = weaponid;
    return GivePlayerWeapon(playerid, weaponid, ammo);
}
#if defined _ALS_GivePlayerWeapon
   #undef GivePlayerWeapon
#else
    #define _ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon FIXER_GivePlayerWeapon

stock FIXER_GetPlayerWeapon(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

    return FIXER_p_CurrentWeapon[playerid];
}
#if defined _ALS_GetPlayerWeapon
   #undef GetPlayerWeapon
#else
    #define _ALS_GetPlayerWeapon
#endif
#define GetPlayerWeapon FIXER_GetPlayerWeapon

stock FIXER_SetPlayerWorldBounds(playerid, Float:x_max, Float:x_min, Float:y_max, Float:y_min)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	new ret = SetPlayerWorldBounds(playerid, x_max, x_min, y_max, y_min);
	if (ret)
		CallRemoteFunction("FIXER_OnPlayerWorldBoundSet", "iffff", playerid, x_max, x_min, y_max, y_min);

	if (x_max == x_min || y_max == y_min)
		FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_CHECK] = false;
	else
		FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_CHECK] = true;

	return ret;
}
#if defined _ALS_SetPlayerWorldBounds
	#undef SetPlayerWorldBounds
#else
	#define _ALS_SetPlayerWorldBounds
#endif
#define SetPlayerWorldBounds FIXER_SetPlayerWorldBounds

forward FIXER_OnPlayerWorldBoundSet(playerid, Float:x_max, Float:x_min, Float:y_max, Float:y_min);
public 	FIXER_OnPlayerWorldBoundSet(playerid, Float:x_max, Float:x_min, Float:y_max, Float:y_min)
{
	new Float:tmp;

	if (x_max < x_min)
	{
		tmp = x_min,
		x_min = x_max,
		x_max = tmp;
	}

	if (y_max < y_min)
	{
		tmp = y_min,
		y_min = y_max,
		y_max = tmp;
	}

   	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_CHECK] = false;

	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_LX] = x_min;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_UX] = x_max;

	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_LY] = y_min;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_UY] = y_max;

	GetPlayerPos(playerid, tmp, tmp, tmp),
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PX] = (x_max - x_min) / 2 + x_min;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PY] = (y_max - y_min) / 2 + y_min;
	FIXER_p_WorldBounds[playerid][FIXER_e_WORLD_BOUND_PZ] = tmp;
}

stock FIXER_TogglePlayerSpectating(playerid, toggle)
{
	new ret = TogglePlayerSpectating(playerid, toggle);
	if (ret)
	{
		FIXER_p_ToggleSpecTick[playerid] = FIXER_GetTickCount();
		KillTimer(FIXER_p_ToggleSpecTimer[playerid]);

	    FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] = INVALID_PLAYER_ID;

	    if (toggle)
	    	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_TYPE] = SPECTATE_TYPE_ENABLED;
		else
	    	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_TYPE] = SPECTATE_TYPE_DISABLED;

	    FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_MODE] = 0;
	}

	return ret;
}
#if defined _ALS_TogglePlayerSpectating
	#undef TogglePlayerSpectating
#else
	#define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating FIXER_TogglePlayerSpectating

stock FIXER_SetPlayerCameraPos(playerid, Float:x, Float:y, Float:z, delay = 350)
{
	new ret = SetPlayerCameraPos(playerid, x, y, z);
	if (ret)
	{
	    if (FIXER_p_ToggleSpecTick[playerid] != -1 && (FIXER_GetTickCount() - FIXER_p_ToggleSpecTick[playerid]) <= 600)
	    {
			KillTimer(FIXER_p_ToggleSpecTimer[playerid]);
			FIXER_p_ToggleSpecTimer[playerid] = SetTimerEx("FIXER_OnPlayerCameraSet", delay, false, "ifffi", playerid, x, y, z, -1);
		}
	}

	return ret;
}
#if defined _ALS_SetPlayerCameraPos
	#undef SetPlayerCameraPos
#else
	#define _ALS_SetPlayerCameraPos
#endif
#define SetPlayerCameraPos FIXER_SetPlayerCameraPos

stock FIXER_SetPlayerCameraLookAt(playerid, Float:x, Float:y, Float:z, cut = CAMERA_CUT, delay = 350)
{
	new ret = SetPlayerCameraLookAt(playerid, x, y, z, cut);
	if (ret)
	{
	    if (FIXER_p_ToggleSpecTick[playerid] != -1 && (FIXER_GetTickCount() - FIXER_p_ToggleSpecTick[playerid]) <= 600)
	    {
			KillTimer(FIXER_p_ToggleSpecTimer[playerid]);
			FIXER_p_ToggleSpecTimer[playerid] = SetTimerEx("OnPlayerCameraSet", delay, false, "ifffi", playerid, x, y, z, cut);
		}
	}

	return ret;
}
#if defined _ALS_SetPlayerCameraLookAt
	#undef SetPlayerCameraLookAt
#else
	#define _ALS_SetPlayerCameraLookAt
#endif
#define SetPlayerCameraLookAt FIXER_SetPlayerCameraLookAt

forward FIXER_OnPlayerCameraSet(playerid, Float:x, Float:y, Float:z, cut);
public  FIXER_OnPlayerCameraSet(playerid, Float:x, Float:y, Float:z, cut)
{
    if (cut == -1)
		SetPlayerCameraPos(playerid, x, y, z);
    else
		SetPlayerCameraLookAt(playerid, x, y, z, cut);

    FIXER_p_ToggleSpecTick[playerid] = -1;
    FIXER_p_ToggleSpecTimer[playerid] = 0;
}

stock FIXER_TogglePlayerControllable(playerid, toggle)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (!toggle)
		ClearAnimations(playerid, 1);

	return TogglePlayerControllable(playerid, toggle);
}
#if defined _ALS_TogglePlayerControllable
    #undef TogglePlayerControllable
#else
    #define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable FIXER_TogglePlayerControllable

stock FIXER_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
		new Float:x, Float:y, Float:z;
		GetVehiclePos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z);
	}

	return PutPlayerInVehicle(playerid, vehicleid, seatid);
}
#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle FIXER_PutPlayerInVehicle

stock FIXER_SpawnPlayer(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z);
	}

	return SpawnPlayer(playerid);
}
#if defined _ALS_SpawnPlayer
	#undef SpawnPlayer
#else
	#define _ALS_SpawnPlayer
#endif
#define SpawnPlayer FIXER_SpawnPlayer

stock FIXER_SetPlayerName(playerid, const name[])
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
   		return 0;

    new oldname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, oldname, MAX_PLAYER_NAME);

	if (!strcmp(name, oldname, true))
	{
		if (strcmp(name, oldname, false))
		{
			SetPlayerName(playerid, "_TEMP_NAME_");

			if (SetPlayerName(playerid, name) == -1)
			{
				SetPlayerName(playerid, oldname);
				return -1;
			}
			return 1;
		}
		else
		{
			return 0;
		}
	}

	return SetPlayerName(playerid, name);
}
#if defined _ALS_SetPlayerName
	#undef SetPlayerName
#else
	#define _ALS_SetPlayerName
#endif
#define SetPlayerName FIXER_SetPlayerName

stock FIXER_SetPlayerSpecialAction(playerid, actionid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (actionid == SPECIAL_ACTION_USEJETPACK)
		ClearAnimations(playerid, 1);

	return SetPlayerSpecialAction(playerid, actionid);
}
#if defined _ALS_SetPlayerSpecialAction
    #undef SetPlayerSpecialAction
#else
    #define _ALS_SetPlayerSpecialAction
#endif
#define SetPlayerSpecialAction FIXER_SetPlayerSpecialAction

stock FIXER_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	new w[14], a[14];
	for (new i; i < 14; i++)
	    GetPlayerWeaponData(playerid, i, w[i], a[i]);
	ResetPlayerWeapons(playerid);

	new ret = SetPlayerPos(playerid, x, y, z);
	if (ret)
	{
	    for (new i; i < 14; i++)
	    	GivePlayerWeapon(playerid, w[i], a[i]);
	}

	return ret;
}
#if defined _ALS_SetPlayerPos
	#undef SetPlayerPos
#else
	#define _ALS_SetPlayerPos
#endif
#define SetPlayerPos FIXER_SetPlayerPos

stock FIXER_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren = 0)
{
	new ret = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
	if (ret != INVALID_VEHICLE_ID)
		FIXER_v_VehicleHealth[ret] = 1000.0;
	return ret;
}
#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define CreateVehicle FIXER_CreateVehicle

stock FIXER_AddStaticVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2)
{
	new ret = AddStaticVehicle(vehicletype, x, y, z, rotation, color1, color2);
	if (ret != INVALID_VEHICLE_ID)
    	FIXER_v_VehicleHealth[ret] = 1000.0;
	return ret;
}
#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle FIXER_AddStaticVehicle

stock FIXER_AddStaticVehicleEx(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren = 0)
{
	new ret = AddStaticVehicleEx(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
	if (ret != INVALID_VEHICLE_ID)
    	FIXER_v_VehicleHealth[ret] = 1000.0;
	return ret;
}
#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx FIXER_AddStaticVehicleEx

stock FIXER_SetVehicleHealth(vehicleid, Float:health)
{
	new ret = SetVehicleHealth(vehicleid, health);
	if (ret)
    	FIXER_v_VehicleHealth[vehicleid] = health;
	return ret;
}
#if defined _ALS_SetVehicleHealth
	#undef SetVehicleHealth
#else
	#define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth FIXER_SetVehicleHealth

stock FIXER_EnableTirePopping(toggle)
{
    FIXER_g_Toggle[FIXER_e_TIRE_POPPING] = bool:toggle;
	return 1;
}
#if defined _ALS_EnableTirePopping
	#undef EnableTirePopping
#else
	#define _ALS_EnableTirePopping
#endif
#define EnableTirePopping FIXER_EnableTirePopping

stock FIXER_AllowInteriorWeapons(toggle)
{
    FIXER_g_Toggle[FIXER_e_INTERIOR_WEAPONS] = bool:toggle;
    return 1;
}
#if defined _ALS_AllowInteriorWeapons
	#undef AllowInteriorWeapons
#else
	#define _ALS_AllowInteriorWeapons
#endif
#define AllowInteriorWeapons FIXER_AllowInteriorWeapons

stock FIXER_AllowAdminTeleport(toggle)
{
    FIXER_g_Toggle[FIXER_e_ADMIN_TELEPORT] = bool:toggle;
    return 1;
}
#if defined _ALS_AllowAdminTeleport
	#undef AllowAdminTeleport
#else
	#define _ALS_AllowAdminTeleport
#endif
#define AllowAdminTeleport FIXER_AllowAdminTeleport

stock FIXER_EnableVehicleFriendlyFire(toggle = 1)
{
    FIXER_g_Toggle[FIXER_e_VEHICLE_FRIENDLYFIRE] = bool:toggle;
    return 1;
}
#if defined _ALS_EnableVehicleFriendlyFire
	#undef EnableVehicleFriendlyFire
#else
	#define _ALS_EnableVehicleFriendlyFire
#endif
#define EnableVehicleFriendlyFire FIXER_EnableVehicleFriendlyFire

stock Text:FIXER_TextDrawCreate(Float:x, Float:y, text[])
{
	if (text[0] == '\0' || (text[0] == '\1' && text[1] == '\0'))
		return TextDrawCreate(x, y, " ");

	return TextDrawCreate(x, y, text);
}
#if defined _ALS_TextDrawCreate
	#undef TextDrawCreate
#else
	#define _ALS_TextDrawCreate
#endif
#define TextDrawCreate FIXER_TextDrawCreate

stock PlayerText:FIXER_CreatePlayerTextDraw(playerid, Float:x, Float:y, text[])
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
		return PlayerText:INVALID_TEXT_DRAW;

	if (text[0] == '\0' || (text[0] == '\1' && text[1] == '\0'))
		return CreatePlayerTextDraw(playerid, x, y, " ");

	return CreatePlayerTextDraw(playerid, x, y, text);
}
#if defined _ALS_CreatePlayerTextDraw
	#undef CreatePlayerTextDraw
#else
	#define _ALS_CreatePlayerTextDraw
#endif
#define CreatePlayerTextDraw FIXER_CreatePlayerTextDraw

stock FIXER_TextDrawSetString(Text:text, string[])
{
	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return TextDrawSetString(text, " ");

	return TextDrawSetString(text, string);
}
#if defined _ALS_TextDrawSetString
	#undef TextDrawSetString
#else
	#define _ALS_TextDrawSetString
#endif
#define TextDrawSetString FIXER_TextDrawSetString

stock FIXER_PlayerTextDrawSetString(playerid, PlayerText:text, string[])
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
		return -1;

	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return PlayerTextDrawSetString(playerid, text, " ");

	return PlayerTextDrawSetString(playerid, text, string);
}
#if defined _ALS_PlayerTextDrawSetString
	#undef PlayerTextDrawSetString
#else
	#define _ALS_PlayerTextDrawSetString
#endif
#define PlayerTextDrawSetString FIXER_PlayerTextDrawSetString

#define FIXER_SetAlpha(%0,%1) \
	((%0 & ~0xFF) | clamp(%1, 0x00, 0xFF))

stock FIXER_GameTextForPlayer(playerid, string[], time, style)
{
	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return GameTextForPlayer(playerid, " ", time, style);

	switch (style)
	{
	    case 7:
	    {
	        KillTimer(FIXER_p_GameTextTimer[playerid][0]);
			FIXER_p_GameTextTimer[playerid][0] = SetTimerEx("__OnGameTextUpdate", 100, true, "iiii", playerid, time, style, 1);
			PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][0], FIXER_SetAlpha(0x36682CFF, 0));
			PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][0]);
			FIXER_p_GameTextFader[playerid][0] = 0;
			return 1;
	    }

	    case 8:
	    {
	        KillTimer(FIXER_p_GameTextTimer[playerid][1]);
			FIXER_p_GameTextTimer[playerid][1] = SetTimerEx("__OnGameTextUpdate", 100, true, "iiii", playerid, time, style, 1);
			PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][1], FIXER_SetAlpha(0xACCBF1FF, 0));
			PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][1]);
			FIXER_p_GameTextFader[playerid][1] = 0;
			return 1;
	    }

	    case 9:
	    {
	        KillTimer(FIXER_p_GameTextTimer[playerid][2]);
			FIXER_p_GameTextTimer[playerid][2] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", playerid, 0, style, 0);
			PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][2]);
			return 1;
	    }

	    case 10:
	    {
	        KillTimer(FIXER_p_GameTextTimer[playerid][3]);
			FIXER_p_GameTextTimer[playerid][3] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", playerid, 0, style, 0);
			PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][3]);
			return 1;
	    }

	    case 11:
	    {
	        KillTimer(FIXER_p_GameTextTimer[playerid][4]);
			FIXER_p_GameTextTimer[playerid][4] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", playerid, 0, style, 0);
			PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][4]);
			return 1;
	    }

	    case 12:
	    {
	        KillTimer(FIXER_p_GameTextTimer[playerid][5]);
			FIXER_p_GameTextTimer[playerid][5] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", playerid, 0, style, 0);
			PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][5]);
			return 1;
	    }

	    case 13:
	    {
	        KillTimer(FIXER_p_GameTextTimer[playerid][6]);
			FIXER_p_GameTextTimer[playerid][6] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", playerid, 0, style, 0);
			PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][6]);
			return 1;
	    }
	}

	return GameTextForPlayer(playerid, string, time, style);
}
#if defined _ALS_GameTextForPlayer
	#undef GameTextForPlayer
#else
	#define _ALS_GameTextForPlayer
#endif
#define GameTextForPlayer FIXER_GameTextForPlayer

forward __OnGameTextUpdate(playerid, time, style, status);
public  __OnGameTextUpdate(playerid, time, style, status)
{
	switch (style)
    {
		case 7:
		{
			switch (status)
			{
			    case 1:
				{
		    		FIXER_p_GameTextFader[playerid][0] += 10;
					PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][0], FIXER_SetAlpha(0x36682CFF, FIXER_p_GameTextFader[playerid][0]));
					PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][0]);

					if (FIXER_p_GameTextFader[playerid][0] >= 255)
					{
					    KillTimer(FIXER_p_GameTextTimer[playerid][0]);
						FIXER_p_GameTextTimer[playerid][0] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", playerid, time, style, 2);
					}
				}

				case 2:
					FIXER_p_GameTextTimer[playerid][0] = SetTimerEx("__OnGameTextUpdate", 100, true, "iiii", playerid, time, style, 3);

				case 3:
				{
		    		FIXER_p_GameTextFader[playerid][0] -= 10;
					PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][0], FIXER_SetAlpha(0x36682CFF, FIXER_p_GameTextFader[playerid][0]));
					PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][0]);

					if (FIXER_p_GameTextFader[playerid][0] <= 0)
					{
					    KillTimer(FIXER_p_GameTextTimer[playerid][0]);
			    		PlayerTextDrawHide(playerid, FIXER_ptxt_GameText[playerid][0]);
					}
				}
			}
		}

		case 8:
		{
			switch (status)
			{
			    case 1:
				{
		    		FIXER_p_GameTextFader[playerid][1] += 10;
					PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][1], FIXER_SetAlpha(0xACCBF1FF, FIXER_p_GameTextFader[playerid][1]));
					PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][1]);

					if (FIXER_p_GameTextFader[playerid][1] >= 255)
					{
					    KillTimer(FIXER_p_GameTextTimer[playerid][1]);
						FIXER_p_GameTextTimer[playerid][1] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", playerid, time, style, 2);
					}
				}

				case 2:
					FIXER_p_GameTextTimer[playerid][1] = SetTimerEx("__OnGameTextUpdate", 100, true, "iiii", playerid, time, style, 3);

				case 3:
				{
		    		FIXER_p_GameTextFader[playerid][1] -= 10;
					PlayerTextDrawColor(playerid, FIXER_ptxt_GameText[playerid][1], FIXER_SetAlpha(0xACCBF1FF, FIXER_p_GameTextFader[playerid][1]));
					PlayerTextDrawShow(playerid, FIXER_ptxt_GameText[playerid][1]);

					if (FIXER_p_GameTextFader[playerid][1] <= 0)
					{
					    KillTimer(FIXER_p_GameTextTimer[playerid][1]);
			    		PlayerTextDrawHide(playerid, FIXER_ptxt_GameText[playerid][1]);
					}
				}
			}
		}

		case 9:
   			PlayerTextDrawHide(playerid, FIXER_ptxt_GameText[playerid][2]);

		case 10:
   			PlayerTextDrawHide(playerid, FIXER_ptxt_GameText[playerid][3]);

		case 11:
   			PlayerTextDrawHide(playerid, FIXER_ptxt_GameText[playerid][4]);

		case 12:
   			PlayerTextDrawHide(playerid, FIXER_ptxt_GameText[playerid][5]);

		case 13:
   			PlayerTextDrawHide(playerid, FIXER_ptxt_GameText[playerid][6]);
	}
}

stock FIXER_GameTextForAll(string[], time, style)
{
	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return GameTextForAll(" ", time, style);

	switch (style)
	{
	    case 7:
	    {
	        for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	        {
				if (IsPlayerConnected(i))
				{
			        KillTimer(FIXER_p_GameTextTimer[i][0]);
					FIXER_p_GameTextTimer[i][0] = SetTimerEx("__OnGameTextUpdate", 100, true, "iiii", i, time, style, 1);
					PlayerTextDrawColor(i, FIXER_ptxt_GameText[i][0], FIXER_SetAlpha(0x36682CFF, 0));
					PlayerTextDrawShow(i, FIXER_ptxt_GameText[i][0]);
					FIXER_p_GameTextFader[i][0] = 0;
				}
			}
			return 1;
	    }

	    case 8:
	    {
	        for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	        {
				if (IsPlayerConnected(i))
				{
			        KillTimer(FIXER_p_GameTextTimer[i][1]);
					FIXER_p_GameTextTimer[i][1] = SetTimerEx("__OnGameTextUpdate", 100, true, "iiii", i, time, style, 1);
					PlayerTextDrawColor(i, FIXER_ptxt_GameText[i][1], FIXER_SetAlpha(0xACCBF1FF, 0));
					PlayerTextDrawShow(i, FIXER_ptxt_GameText[i][1]);
					FIXER_p_GameTextFader[i][1] = 0;
				}
			}
			return 1;
	    }

	    case 9:
	    {
	        for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	        {
				if (IsPlayerConnected(i))
				{
			        KillTimer(FIXER_p_GameTextTimer[i][2]);
					FIXER_p_GameTextTimer[i][2] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", i, 0, style, 0);
					PlayerTextDrawShow(i, FIXER_ptxt_GameText[i][2]);
				}
			}
			return 1;
	    }

	    case 10:
	    {
	        for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	        {
				if (IsPlayerConnected(i))
				{
			        KillTimer(FIXER_p_GameTextTimer[i][3]);
					FIXER_p_GameTextTimer[i][3] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", i, 0, style, 0);
					PlayerTextDrawShow(i, FIXER_ptxt_GameText[i][3]);
				}
			}
			return 1;
	    }

	    case 11:
	    {
	        for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	        {
				if (IsPlayerConnected(i))
				{
			        KillTimer(FIXER_p_GameTextTimer[i][4]);
					FIXER_p_GameTextTimer[i][4] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", i, 0, style, 0);
					PlayerTextDrawShow(i, FIXER_ptxt_GameText[i][4]);
				}
			}
			return 1;
	    }

	    case 12:
	    {
	        for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	        {
				if (IsPlayerConnected(i))
				{
			        KillTimer(FIXER_p_GameTextTimer[i][5]);
					FIXER_p_GameTextTimer[i][5] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", i, 0, style, 0);
					PlayerTextDrawShow(i, FIXER_ptxt_GameText[i][5]);
				}
			}
			return 1;
	    }

	    case 13:
	    {
	        for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	        {
				if (IsPlayerConnected(i))
				{
			        KillTimer(FIXER_p_GameTextTimer[i][6]);
					FIXER_p_GameTextTimer[i][6] = SetTimerEx("__OnGameTextUpdate", time, false, "iiii", i, 0, style, 0);
					PlayerTextDrawShow(i, FIXER_ptxt_GameText[i][6]);
				}
			}
			return 1;
	    }
	}

	return GameTextForAll(string, time, style);
}
#if defined _ALS_GameTextForAll
	#undef GameTextForAll
#else
	#define _ALS_GameTextForAll
#endif
#define GameTextForAll FIXER_GameTextForAll

stock FIXER_GetWeaponName(weaponid, weapon[], len)
{
	switch (weaponid)
	{
	    case 0:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Fist", len);
	    }

		case 18:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Molotov Cocktail", len);
        }

		case 44:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Night Vision Goggles", len);
        }

		case 45:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Thermal Goggles", len);
        }

        default: return GetWeaponName(weaponid, weapon, len);
	}

	return 1;
}
#if defined _ALS_GetWeaponName
    #undef GetWeaponName
#else
    #define _ALS_GetWeaponName
#endif
#define GetWeaponName FIXER_GetWeaponName

stock FIXER_GangZoneCreate(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	if (minx > maxx)
	{
	    new Float:shift = maxx;
	    maxx = minx;
	    minx = shift;
	}

	if (miny > maxy)
	{
	    new Float:shift = maxy;
	    maxy = miny;
	    miny = shift;
	}

	return GangZoneCreate(minx, miny, maxx, maxy);
}
#if defined _ALS_GangZoneCreate
	#undef GangZoneCreate
#else
	#define _ALS_GangZoneCreate
#endif
#define GangZoneCreate FIXER_GangZoneCreate

stock FIXER_random(max)
{
	if (max < 0)
		return -random(-max);

	return random(max);
}
#if defined _ALS_random
	#undef random
#else
	#define _ALS_random
#endif
#define random FIXER_random

stock FIXER_strins(string[], const substr[], pos, maxlength = sizeof(string))
{
	if (string[0] > 255)
	{
		new strlength = strlen(string);
		new sublength = strlen(substr);
		new m4 = maxlength * 4;

		if (strlength + sublength >= m4)
		{
			if (pos + sublength >= m4)
				return string{pos} = '\0', strcat(string, substr, maxlength);
			else
				string{maxlength - sublength - 1} = '\0';
		}
		return strins(string, substr, pos, maxlength);
	}
	else if (substr[0] > 255)
	{
		new strlength = strlen(string);
		new sublength = strlen(substr);

		if (strlength + sublength >= maxlength)
		{
			if (pos + sublength >= maxlength)
				return string[pos] = '\0', strcat(string, substr, maxlength);
			else
				string[maxlength - sublength - 1] = '\0';
		}

		return strins(string, substr, pos, maxlength);
	}
	else return format(string, maxlength, "%.*s%s%s", pos, string, substr, string[pos]);
}
#if defined _ALS_strins
	#undef strins
#else
	#define _ALS_strins
#endif
#define strins FIXER_strins

stock FIXER_valstr(dest[], value, bool:pack = false)
{
	static const __cellmin[] = !"-2147483648";

	if (value == cellmin)
		pack && strpack(dest, __cellmin, 12) || strunpack(dest, __cellmin, 12);
	else
		format(dest, 12, "%d", value), pack && strpack(dest, dest, 12);

	return 0;
}
#if defined _ALS_valstr
	#undef valstr
#else
	#define _ALS_valstr
#endif
#define valstr FIXER_valstr

stock FIXER_strcmp(const string1[], const string2[], bool:ignorecase = false, length = cellmax)
{
	if (string1[0])
		return (string2[0]) ? (strcmp(string1, string2, ignorecase, length)) : (1);
	else
		return (string2[0]) ? (-1) : (0);
}
#if defined _ALS_strcmp
	#undef strcmp
#else
	#define _ALS_strcmp
#endif
#define strcmp FIXER_strcmp

stock FIXER_GetTickCount()
{
	new ret = GetTickCount();

	if (ret < 0)
		ret += 2147483647;

	return ret;
}
#if defined _ALS_GetTickCount
	#undef GetTickCount
#else
	#define _ALS_GetTickCount
#endif
#define GetTickCount FIXER_GetTickCount

stock FIXER_tickcount(&granularity = 0)
{
	new ret = tickcount(granularity);

	if (ret < 0)
		ret += 2147483647;

	return ret;
}
#if defined _ALS_tickcount
	#undef tickcount
#else
	#define _ALS_tickcount
#endif
#define tickcount FIXER_tickcount

stock FIXER_PlayerSpectatePlayer(playerid, targetplayerid, mode = SPECTATE_MODE_NORMAL)
{
	if (targetplayerid == playerid)
	    return 0;

	if (!IsPlayerConnected(playerid))
	    return 0;

	if (!IsPlayerConnected(targetplayerid))
	    return 0;

	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] = targetplayerid;
 	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_TYPE] = SPECTATE_TYPE_PLAYER;
  	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_MODE] = mode;

	SetPlayerInterior(playerid, GetPlayerInterior(targetplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetplayerid));

	if (IsPlayerInAnyVehicle(targetplayerid))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetplayerid), mode);
	else
	    PlayerSpectatePlayer(playerid, targetplayerid, mode);

	return 1;
}
#if defined _ALS_PlayerSpectatePlayer
    #undef PlayerSpectatePlayer
#else
    #define _ALS_PlayerSpectatePlayer
#endif
#define PlayerSpectatePlayer FIXER_PlayerSpectatePlayer

stock FIXER_PlayerSpectateVehicle(playerid, targetvehicleid, mode = SPECTATE_MODE_NORMAL)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	if (!IsValidVehicle(targetvehicleid))
	    return 0;

	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] = targetvehicleid;
 	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_TYPE] = SPECTATE_TYPE_VEHICLE;
 	FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_MODE] = mode;

	SetPlayerInterior(playerid, FIXER_v_Interior[targetvehicleid]);
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(targetvehicleid));

	return PlayerSpectateVehicle(playerid, targetvehicleid, mode);
}
#if defined _ALS_PlayerSpectateVehicle
    #undef PlayerSpectateVehicle
#else
    #define _ALS_PlayerSpectateVehicle
#endif
#define PlayerSpectateVehicle FIXER_PlayerSpectateVehicle

stock static FIXER_UpdatePlayerSpectateID(playerid, bool:advance = true)
{
	switch (FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_TYPE])
	{
	    case SPECTATE_TYPE_PLAYER:
	    {
	        new count;
			new targetid = INVALID_PLAYER_ID;

			if (advance)
			{
   			SPEC_NEXT_PLAYER:
                for (new i = (FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] + 1), j = GetPlayerPoolSize(); IsPlayerConnected(i); i++)
                {
                    count++;

                    if (i > j)
                    {
						if (count < 2)
						    break;

                     	goto SPEC_PERVIOUS_PLAYER;
					}

                    if (GetPlayerState(i) == PLAYER_STATE_SPECTATING || GetPlayerState(i) == PLAYER_STATE_WASTED)
                        continue;

                    targetid = i;
					break;
                }
			}
			else
			{
			SPEC_PERVIOUS_PLAYER:
                for (new i = (FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] - 1); IsPlayerConnected(i); i--)
                {
                    count++;

                    if (i < 0)
                    {
						if (count < 2)
						    break;

                     	goto SPEC_NEXT_PLAYER;
					}

                    if (GetPlayerState(i) == PLAYER_STATE_SPECTATING || GetPlayerState(i) == PLAYER_STATE_WASTED)
                        continue;

                    targetid = i;
					break;
                }
			}

			if (targetid == INVALID_PLAYER_ID)
   				return INVALID_PLAYER_ID;

            FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] = targetid;

			SetPlayerInterior(playerid, GetPlayerInterior(targetid));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

			if (IsPlayerInAnyVehicle(targetid))
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid), FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_MODE]);
			else
			    PlayerSpectatePlayer(playerid, targetid, FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_MODE]);

   			return targetid;
		}

		case SPECTATE_TYPE_VEHICLE:
	    {
	        new count;
			new targetid = INVALID_VEHICLE_ID;

			if (advance)
			{
   			SPEC_NEXT_VEHICLE:
                for (new i = (FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] + 1), j = GetVehiclePoolSize(); ; i++)
                {
                	if (!IsValidVehicle(i))
                		continue;

                    count++;

                    if (i > j)
                    {
                        if (count < 2)
                            break;

                     	goto SPEC_PERVIOUS_VEHICLE;
					}

                   	targetid = i;
					break;
                }
			}
			else
			{
			SPEC_PERVIOUS_VEHICLE:
                for (new i = (FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] - 1); ; i--)
                {
                	if (!IsValidVehicle(i))
                		continue;

                    count++;

                    if (i < 1)
                    {
                        if (count < 2)
                            break;

                     	goto SPEC_NEXT_VEHICLE;
					}

                   	targetid = i;
					break;
                }
			}

			if (targetid == INVALID_VEHICLE_ID)
	   			return INVALID_VEHICLE_ID;

			FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_ID] = targetid;

			SetPlayerInterior(playerid, FIXER_v_Interior[targetid]);
			SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(targetid));

			PlayerSpectateVehicle(playerid, targetid, FIXER_p_SpecData[playerid][FIXER_e_SPEC_DATA_MODE]);
			return targetid;
		}
	}

	return -1;
}

stock FIXER_LinkVehicleToInterior(vehicleid, interiorid)
{
	CallRemoteFunction("FIXER_OnVehicleInteriorSet", "ii", vehicleid, interiorid);
	return LinkVehicleToInterior(vehicleid, interiorid);
}
#if defined _ALS_LinkVehicleToInterior
	#undef LinkVehicleToInterior
#else
	#define _ALS_LinkVehicleToInterior
#endif
#define LinkVehicleToInterior FIXER_LinkVehicleToInterior

forward FIXER_OnVehicleInteriorSet(vehicleid, interiorid);
public  FIXER_OnVehicleInteriorSet(vehicleid, interiorid)
{
 	FIXER_v_Interior[vehicleid] = interiorid;
}

stock FIXER_GetPlayerWeaponData(playerid, slot, &weapons, &ammo)
{
	new ret = GetPlayerWeaponData(playerid, slot, weapons, ammo);
	if (ret)
	{
		if (ammo <= 0)
		    weapons = 0;
	}
	return ret;
}
#if defined _ALS_GetPlayerWeaponData
	#undef GetPlayerWeaponData
#else
	#define _ALS_GetPlayerWeaponData
#endif
#define GetPlayerWeaponData FIXER_GetPlayerWeaponData

stock FIXER_Kick(playerid, delay = 150)
{
	if (FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE])
	    return 1;

	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE] = true;
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TIMER] = SetTimerEx("FIXER_OnPlayerDelayKicked", ((delay <= 0) ? (150) : (delay)), false, "i", playerid);
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TYPE] = 1;
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_REASON][0] = EOS;
	return 1;
}
#if defined _ALS_Kick
	#undef Kick
#else
	#define _ALS_Kick
#endif
#define Kick FIXER_Kick

stock FIXER_Ban(playerid, delay = 150)
{
	if (FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE])
	    return 1;

	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE] = true;
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TIMER] = SetTimerEx("FIXER_OnPlayerDelayKicked", ((delay <= 0) ? (150) : (delay)), false, "i", playerid);
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TYPE] = 2;
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_REASON][0] = EOS;

    new name[MAX_PLAYER_NAME], ip[18];
    GetPlayerName(playerid, name, sizeof (name));
    GetPlayerIp(playerid, ip, sizeof (ip));

	new rstring[512];
 	format(rstring, sizeof (rstring), "INSERT INTO `Members` (`Username`, `Ip`, `Reason`, `DateStamp`) VALUES ('%q', '%q', '%q', %i)", name, ip, "", getdate());
 	db_query(FIXER_g_BlacklistDB, rstring);
	return 1;
}
#if defined _ALS_Ban
	#undef Ban
#else
	#define _ALS_Ban
#endif
#define Ban FIXER_Ban

stock FIXER_BanEx(playerid, const reason[], delay = 150)
{
	if (FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE])
	    return 1;

	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE] = true;
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TIMER] = SetTimerEx("FIXER_OnPlayerDelayKicked", ((delay <= 0) ? (150) : (delay)), false, "i", playerid);
	FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_TYPE] = 3;
	format(FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_REASON], 128, reason);

    new name[MAX_PLAYER_NAME], ip[18];
    GetPlayerName(playerid, name, sizeof (name));
    GetPlayerIp(playerid, ip, sizeof (ip));

	new mstring[512];
 	format(mstring, sizeof (mstring), "INSERT INTO `Members` (`Username`, `Ip`, `Reason`, `DateStamp`) VALUES ('%q', '%q', '%q', %i)", name, ip, FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_REASON], getdate());
 	db_query(FIXER_g_BlacklistDB, mstring);
	return 1;
}
#if defined _ALS_BanEx
	#undef BanEx
#else
	#define _ALS_BanEx
#endif
#define BanEx FIXER_BanEx

forward FIXER_OnPlayerDelayKicked(playerid);
public  FIXER_OnPlayerDelayKicked(playerid)
{
    FIXER_p_BlacklistData[playerid][FIXER_e_BLACKLIST_DATA_ACTIVE] = false;
	Kick(playerid);
}

stock UnBan(const name[], const ip[])
{
	new ustring[256];
 	format(ustring, sizeof (ustring), "DELETE FROM `Members` WHERE `Username` = '%q' OR `Ip` = '%q'", name, ip);
 	return ((db_query(FIXER_g_BlacklistDB, ustring) ? (1) : (0));
}